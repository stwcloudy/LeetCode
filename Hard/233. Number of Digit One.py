"""
http://www.cnblogs.com/cyjb/p/digitOccurrenceInRegion.html
详细介绍
计算1-n中x出现的次数都可以用这个题来做(x= 1-9,0的情况有点特殊)
首先要知道以下的规律：
    从 1 至 10，在它们的个位数中，任意的 X 都出现了 1 次。
    从 1 至 100，在它们的十位数中，任意的 X 都出现了 10 次。
    从 1 至 1000，在它们的千位数中，任意的 X 都出现了 100 次。
依此类推，从 1 至 10i10i，在它们的左数第二位（右数第 ii 位）中，任意的 X 都出现了 10^(i-1)次。
这个规律很容易验证，这里不再多做说明。
接下来以 n=2593,X=5n=2593,X=5 为例来解释如何得到数学公式。从 1 至 2593 中，数字 5 总计出现了 813 次，其中有 259 次出现在个位，260 次出现在十位，294 次出现在百位，0 次出现在千位。
现在依次分析这些数据，首先是个位。从1至2590 中，包含了259个10，因此任意的X 都出现了 259 次。最后剩余的三个数 2591, 2592 和 2593，因为它们最大的个位数字 3 < X，因此不会包含任何 5。
然后是十位。从1至2500 中包含了25 个100，因此任意的 X 都出现了 25×10=25025×10=250 次。剩下的数字是从 2501 至 2593，它们最大的十位数字 9 > X，因此会包含全部 10 个 5。最后总计 250 + 10 = 260。
接下来是百位。从 1 至 2000 中，包含了 2 个 1000，因此任意的 X 都出现了2×100=200 次。剩下的数字是从 2001 至 2593，它们最大的百位数字 5 == X，这时情况就略微复杂，它们的百位肯定是包含 5 的，
但不会包含全部 100 个。如果把百位是 5 的数字列出来，是从 2500 至 2593，数字的个数与百位和十位数字相关，是 93+1 = 94。最后总计 200 + 94 = 294。
最后是千位。现在已经没有更高位，因此直接看最大的千位数字 2 < X，所以不会包含任何5。到此为止，已经计算出全部数字5的出现次数。

总结一下以上的算法，可以看到，当计算右数第 ii 位包含的 X 的个数时：
    取第i位左边（高位）的数字，乘以10^(i-1) ，得到基础值a。
    取第i位数字，计算修正值：
    如果大于X，则结果为 a+10^(i-1)。
    如果小于X，则结果为 a。
    如果等于X，则取第i位右边（低位）数字，设为b，最后结果为 a+b+1。
相应的代码非常简单，效率也非常高，时间复杂度只有O(log10n)。
"""

class Solution(object):
    def countDigitOne(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 0:
            return 0
        res = 0
        i = 1
        k = n/i
        while k:
            res += (k/10)*i
            cur = k%10
            if cur > 1:
                res += i
            elif cur == 1:
                res += (n - k*i + 1)
            i *= 10
            k = n / i
        return res