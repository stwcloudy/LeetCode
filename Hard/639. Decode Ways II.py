'''
'A' -> 1
'B' -> 2
...
'Z' -> 26
A-Z按照上述方式编码,除此之外编码字符串中还会出现'*',该字符能表示1-9中任意一个数字,现给定一个编码字符串求出其编码的方式

动态规划：
dp[i]表示到s[i-1]位置的所有编码数,最后结果为dp[n],n=len(s),如果当前位单独编码则dp[i]与dp[i-1]相关,如果和前一位共同编码合法,则与dp[i-1]
有关, 所以dp[i]最多与前两位的结果相关.
转移方程:
1.s[i-1] == '*':
	1).基础情况,当前位单独编码,9种情况乘以之前已有的编码情况dp[i] = 9 * dp[i-1]
	2).和前一位共同编码：
		2.1 前一位s[i-2] == '1', 则9种都满足即dp[i] += dp[i-2]*9
		2.2 前一位s[i-2] == '2', 则只有'*'取1，2，3，4，5，6满足条件, dp[i-2]*6
		2.3 前一位s[i-2] == '*', 则以上两个条件都可出现, dp[i-2]*15
2.s[i-1] != '*':
	1). s[i-1] == '0'：
		1.1 此时s[i-2]必须为'1','2','*'中的一种,否则不能编码,直接返回0
		1.2 s[i-2]满足条件,则只能和前一位共同编码,dp[i] = dp[i-2]，若为'*'还要再加一次(两种情形都满足)
	2). s[i-1] != '0':
		2.1 基础情况,当前位单独编码,9种情况乘以之前已有的编码情况dp[i] = dp[i-1]
		2.2 共同编码,且前一位为'*',dp[i] +=dp[i-2],若s[i-1] <='6'则再加一次
		2.3 共同编码,且前一位+当前为组合<=26，则dp[i] += dp[i-2]
'''
class Solution:
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        n = len(s)
        dp = [0]*(n+1)
        dp[0] = 1
        dp[1] = 9 if s[0] == '*' else 1
        for i in range(2,n+1):
            if s[i-1] == '*':
                dp[i] = 9*dp[i-1]
                if s[i-2] == '1':
                    dp[i] += dp[i-2]*9
                elif s[i-2] == '2':
                    dp[i] += 6*dp[i-2]
                elif s[i-2] == '*':
                    dp[i] += 15*dp[i-2]
            else:
                if s[i-1] == '0':
                    if s[i-2] == '1' or s[i-2] == '2' or s[i-2] == '*':
                        dp[i] = dp[i-2]
                        if s[i-2] == '*':
                            dp[i] += dp[i-2]
                    else:
                        return 0
                else:
                    dp[i] = dp[i-1]
                    if s[i-2] == '*':
                        dp[i] += dp[i-2]
                        if int(s[i-1]) <= 6:
                            dp[i] += dp[i-2]
                    else:
                        if s[i-2] != '0' and int(s[i-2:i]) <= 26:
                            dp[i] += dp[i-2]
            dp[i] %= (10**9 + 7)
        #print (dp)
        return dp[n] % (10**9 + 7)